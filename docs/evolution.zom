//! A proof of concept of a Reference Counted smart pointer in Zom,
//! it doesn't actually compiles but it shows which way the Zom Lang
//! evolve. The standard library as showed in this file may not be
//! like that in the future.

// Imports, they are 'Import Item'
import std.mem;
import std.prelude.*;

// A struct with a generic 'T' that may not implement 'Sized'
struct RcInner[T: ?Sized] {
    count: usize,
    value: T,
}

// Implementation with generic 'T'
impl[T: ?Sized] RcInner[T] {
    fn inc_count(*self) void {
        self->count += 1;
    }

    fn dec_count(*self) void {
        self->count -= 1;
    }
}

// Another struct with generic 'T' that may not implement 'Sized'.
// This struct is publicly avalaible, you just need to import it.
pub struct Rc[T: ?Sized] {
    inner: *RcInner[T],
}

impl[T: ?Sized] Rc[T] {
    pub fn new(value: T) Self {
        Self {
            inner: &RcInner {
                count: 1,
                value: mem.alloc.[T](),
            },
            alloc,
        }
    }

    // a public function that takes an argument named 'self' that is a pointer.
    // '*self' is equivalent to 'self: *Self'.
    pub fn count(*self) usize {
        return self->inner()->count
    }
}

// Implementation of the trait 'Deref' for every Rc[T]
impl[T: ?Sized] Deref for Rc[T] {
    type Target = T;

    fn deref(*self) *Target {
        &self->inner()->value
    }
}

impl[T: ?Sized] Clone for Rc[T] {
    fn clone(*self) Self {
        self->inner()->inc_count();
        return Self {
            inner: self->inner
        }
    }
}

// This trait is kinda special, it's called when a variable doesn't live anymore
// inspired by C++ RAII and Rust OBRM.
impl[T: ?Sized] Drop for Rc[T] {
    fn drop(*self) void {
        self->inner->dec_count();
        if self->count() == 0 {
            // No more references, free the object
            mem.free[T](self->deref());
        }
    }
}

// this is a test, it's like a function, it's called when it's build in test mode.
test "Rc creation" {
    // ...
}

// example of a function taking a function pointer.
pub fn map[T](list: []T, f: fn (T) T) void {
    //                      ^^^^^^^^ function pointer type
    //                      takes an argument of type 'T' and returns of type 'T'
    for e in &list {
        *e = f();
    }
}

test "lists" {
    var list = [1, 2, 3, 4, 5];
    //         ---------------
    //         array / slice expression
}

pub fn print(comptime format: []const u8, args..) void {
    //                                    ------ comptime variadic arguments
    // Basicaly, every argument is known at compile time. Each time the function is called, it's duplicated with the corresponding arguments

    // todo ...
}
