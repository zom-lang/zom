(* 
This is an example code of Zom Code It is not very 
usefull but that shows how it WILL probably work
 *)

const Error = @import("std")::error::Error;
const sin = @import("std")::math::sin;

const _ = @import("std")::cffi::*; # This import all symbols of `std::c_ffi` with the original symbols names.

# Extern function with `C` calling convention
extern "C" func power(num: c_int, pow: c_int) c_int;

# Extern function with `winapi` calling convention
extern "winapi" func foo(bar: u8) u8;

#
# TODO: rethink the error handling system, for now it's confusing. The EH system, should be a zero cost abstraction.
#

(* A function that return a result, if there is no error, f64 is returned but if there is an error, Error is return. *)
func foo(bar: i32) f64 ?! Error {
    (* `var` are variables, mutables. non mutable variables are `const` *)
    var x: i32 = (10 + 9) * bar;

    if x >= 5 && is_greater_than(1, 2) {
        printf("x is greater than 5");
        return 1.3;
    }

    return Error::new("Error occurs", 1)!;
}

func main() void {
    (* functions that returns Error with the `?!` operator can be call with the `try`
       keyword, if there is no error, the expression is return but if there is an error,
       the error is propagate. So the calling function needs also to have a return error, 
       with the same type. In this case `func main() void ?! Error`.*)
    var test: f64 = try foo(9);

    const foo: bool = is_greater_than(1, 9);
}

# You can use attributes to tell the compiler how you want your code to behave.
# Attributes can also be defined by programmers,
@[inline]
@[noMangle]
func is_greater_than(a: i32, b: i32) bool {
    (* It's a really dumb function but it's for demonstration of constant.language.values.zom *)
    if a > b {
        return true;
    } else {
        return false;
    }
}

(* Structs are declared like that. And this function as a visibility of public, because there is `pub:`
   before the declaration of the struct.  *)
pub: const Error = struct {
    name: str,
    code: u32,

    func new(name: str, err_code: u32) Error {
        Error {
            name,
            code = err_code,
        }
    }
};

(* You can append structs, but you can only add child or functions,
   It can be used to inheritance, add function to a type in a library.
   You can only append structs that can be in your scope. 
   Because there is `pub:` before you append it. *)
pub: Error += struct {
    @child::Display: struct {
        func fmt(&self) str {
            (*                  |  here, the as() fuction takes a type in parameter and try to cast the type,
                                |  from u32 to str, because it's at compile-time, you will have a compile 
                                V  error, if that doesn't work. (NOT ACTUALLY SURE ABOUT THAT)*)
            self.name + self.code.as(str)
        }
    }
};

(* this the declaration of an enum, you can add a public visibility with `pub:`,
   you can specify the type of the ordinal value, it can only be an integer litteral (i8, i16, i32, i64, i128, u8, u16, u32, u64, u128)
   you can override the ordinal value for an enum (like Success, Failure or FileNotFound)
   or you can let the compiler choose for you (like UnknownFile) *)
@[repr(u8)]
pub: const ExitStatus = enum {
    Success = 0,
    Failure = 1,
    FileNotFound = 100,
    UnknownFile,
};

(* You can declare unions. It's kinda like enums but it can store memory. 
   The size of an union is the size of the largest thing it stores. *)
pub: const Token = enum {
    (* Union can have zero type stores, like that, *)
    RParen,
    (* You can also override the ordinal value *)
    LParen = 9,
    (* Or a single type *)
    Op: str,
    (* Or a struct. *)
    BinaryOp: struct {
        left: u8,
        op: str,
        right: u8,
    },
    (* Or an enum *)
    Status: enum {
        Ok,
        Warning,
        Bad,
        Failure,
        Critical,
    }
};

(* A sub module from a file, in this case `sub_module` *)
pub: const mod_from_file = module "sub_module";

pub: const mod_in_same_file = module {
    func foo_bar() str {
        "foo bar"
    }
};

# Imagine in an other package

const expr = @import("core")::comptime::expr;

(* This is the definition of a comptime function, it can be used in Zom source code.
   At compile time (comptime) the compiler will compile and call this function, this is
   why it needs to be in its own package (they can be mutliple comptime functions in one
   package). comptime functions can change the AST, interact with it etc..
   But call of a comptime func in zom source code can only be in an other package.*)
pub: func comptime @comptimeFuncAddition(a: expr, b: expr) expr {
    a + b
}

# Could be in the same package.

(* The same thing as `@comptimeFuncAddition` but a better way I think, because, see the next example. *)
pub: scheme @addition {
    ($a:expr, $b:expr): {
        $a + $b
    },
    (* It's possible to have multiple implementation of the same scheme. *)
    ($a:expr, $b:expr, $c:expr): {
        $a + $b + $c
    }
}

(* In this example, a vector is created an is filled with args passed, like so :
   `@vec[1, 2, 3, 4, 5, 6, 7]` *)
pub: scheme @vec {
    [ $($a:expr),* ]: {
        var vec = Vec::new();
        $(
            vec.push($a);
        )
        vec
    }
}

(* Or in this one, a function to directly add assembly in the 
   scope that this schematic is called. like so :
   ```zom
   @asm{ 
    lea 0x7b(%rdi),%eax
    ret
   }
   ``` *)
pub: scheme @asm {
    { $($operand)* $( $($option),* )? } : {
        (* compiler built-in *)
    }
}

(* Pros of this system are :
    - non depandant on std or core libraries
    - more flexible
    - allow variadic number of args
    - allow optional fields.
    - allow multiple brackets : () [] {}
    - allow many separators, like  . , - : ; / |
  Cons of this system :
    - complex *)

# A `comptime` constant is a constant replaced in the code a compile time,
# it can be used to add a name to a magic value.
comptime OFFSET_FOO_BAR: u32 = 10;

comptime {
    # A block of code executed at compile time.
}

const testPacked = packed struct {
    # ...
}

# A `packed` struct is like the keyword `packed` in LLVM, it's a struct where the size is the size of all fields without any padding / offset. (I think ..)


(**
 * Simple doc comment
 * :)
 *)
func foo(bar: i32) void { (* ... *) }


func foo() void {
    var test: u32 = undefined; # test is undefined you can use it because the compiler will throw a compile-time error. 
    #If you define a var / const with `undefined`, you must annotate the type.

    const array: u32[5] = [0, 1, 2, 3, 4]; # A known-size array of type `u32`
    # access of an element :
    @println("zero : {}", array[0]);

    const arr2: u32[_] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; # The compiler will find out at compile time the length of the known-size array.

    const nested_array: u32[2][2] = [[1, 2], [3, 4]]; # A two-dimensional known-size array.
    # access of an element in two dimensional array :
    @println("three : {}", array[1][0]);

    var slice: &u32[] = &[1, 2, 3, 4, 5]; # because a slice doesn't have a compile-time known size, You must borrow it or store it into the heap. size of 5 * u32 (some padding maybe added by LLVM but the principle is here)
    # to access an element, it's the same as for arrays:
    @println("one : {}", array[0]);

    # because it's length is known at runtime you can change (if it's in a var) the content and the size :
    slice = &[6, 5, 4, 3, 2, 1]; # -> size of 6 * u32
}

const structWithGeneric = struct<T, U> {
    a: T,
    b: U
};

